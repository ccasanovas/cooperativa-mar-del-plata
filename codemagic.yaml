workflows:
  ionic-capacitor-ios-workflow:
    name: Ionic Capacitor iOS Workflow
    max_build_duration: 120
    instance_type: mac_mini
    environment:
      groups:
        - app_store_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
        - certificate_credentials # <-- (Includes CERTIFICATE_PRIVATE_KEY - Put your Certificate Private Key here)
      vars:
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_XCODEPROJ: "ios/App/App.xcodeproj"
        XCODE_SCHEME: "App"
        APP_STORE_APP_ID: 6446605700
      node: 12.18.4
      xcode: 13.3
      cocoapods: 1.11.3
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: develop
          include: true
          source: true
    scripts:
      - name: Install cordova res for splashs and icon
        script: |
          npm install -g cordova-res --unsafe-perm && npm rebuild node-sass
      - name: Install npm dependencies for Ionic project
        script: |
          npm install && npm run build:prod
      - name: Update dependencies and copy web assets to native project
        script: |
          # npx cap copy # <- use this is you don't need to update native dependencies
          npx cap add ios # <- update native dependencies and copy web assets to native project
      - name: Execute cordova res for splashs and icon
        script: |
          cordova-res ios --skip-config --copy
      - name: Add Plist Permissions Camera
        script: |
          plutil -insert NSCameraUsageDescription -string "We require access to the camera to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Add Plist Permissions PhotoLibrary
        script: |
          plutil -insert NSPhotoLibraryAddUsageDescription -string "We require access to the photo library to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Add Plist Permissions PhotoLibrary 2
        script: |
          plutil -insert NSPhotoLibraryUsageDescription -string "We require access to the photo library to use it to upload payment notification attachments and documentation in communication with the service provider." ios/App/App/Info.plist
      - name: Cocoapods installation
        script: |
          cd ios/App && pod install
      - name: Pod Update
        script: |
          npx cap update ios
      - name: Add Plist Firebase
        script: |
          CP GoogleService-Info.plist $FCI_BUILD_DIR/ios/App/App/
      - name: Add Plist Firebase 2
        script: |
          CP GoogleService-Info.plist /Users/builder/Downloads/
      - name: Add SwiftDelegate modified
        script: |
          rm -rf ios/App/App/AppDelegate.swift && CP AppDelegate.swift ios/App/App/
      - name: Change Version
        script: |
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number $APP_STORE_APP_ID)
          NEXT_BUILD_NUMBER=1
          plutil -replace CFBundleShortVersionString -string $NEXT_BUILD_NUMBER ios/App/App/Info.plist
      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: |
          keychain initialize
      #- name: Set up Provisioning profiles from environment variables (Use with manual code signing)
      #  script: |
      #    PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
      #    mkdir -p "$PROFILES_HOME"
      #    PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
      #    echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
      #    echo "Saved provisioning profile $PROFILE_PATH"
      - name: Fetch signing files
        script: |
          # app-store-connect fetch-signing-files "com.nevercode.ncionicapp" --type IOS_APP_STORE --create
          app-store-connect fetch-signing-files "ar.com.siwca.coope.cooperativas.arbolito" --type IOS_APP_STORE --create --strict-match-identifier
      - name: Add certificates
        script: |
          keychain add-certificates
      - name: Increment build number
        script: |
          #!/bin/sh
          set -e
          set -x
          cd $FCI_BUILD_DIR/ios/App
          # agvtool new-version -all $(($BUILD_NUMBER +2))
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number $APP_STORE_APP_ID)
          NEXT_BUILD_NUMBER=1.0
          agvtool new-version -all $NEXT_BUILD_NUMBER
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles --custom-export-options '{"teamID": "LTWKRS8WF9"}'
      - name: Set Capabilities
        script: |
          CP App.entitlements ios/App/App/
          chmod 777 setCapabilities.rb
          chmod 777 ios/App/App/App.entitlements
          ruby setCapabilities.rb "App"
      - name: Execute cordova res for splashs and icon
        script: |
          npm run resources
      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" --verbose
    artifacts:
      - $home/export_options.plist
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
        submit_to_app_store: false
        # beta_groups:                                  # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
        #   - group name 1
        #   - group name 2
      email:
        recipients:
          - cristian@i-data.com.ar
        notify:
          success: true     # To not receive a notification when a build succeeds
          failure: true     # To not receive a notification when a build fails
